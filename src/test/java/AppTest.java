
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.atomic.AtomicBoolean;

import org.json.JSONObject;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import entities.Sku;
import stream.SkuConsumerManager;
import stream.SkuGenerator;
import utils.Utils;

public class AppTest {

  private static String filePath = "/Users/ssimsek/projects/recommendation_service/home24-test-data.json";
  private static JSONObject skuObjects;
  private static ExecutorService pool;
  private static AtomicBoolean inService;
  private static LinkedBlockingQueue<Sku> skuQueue;
  private static ConcurrentHashMap<String, Integer> weightsMap;
  private static PriorityBlockingQueue<Sku> orderedQueue;
  private static Sku searchObject;
  private static int limitForExit;

  @BeforeClass
  public static void createJsonObjectFromFile() {
    skuObjects = Utils.readJsonFile(filePath);
    pool = Executors.newFixedThreadPool(10);
    inService = new AtomicBoolean(true);
    skuQueue = new LinkedBlockingQueue<Sku>();
    orderedQueue = new PriorityBlockingQueue<Sku>(2048,
        (s1, s2) -> Integer.compare(s1.getSimilarity(), s2.getSimilarity()));
    searchObject = Sku.Map.toSku("sku-1", skuObjects.getJSONObject("sku-1"));
    limitForExit = skuObjects.keySet().size();

    weightsMap = new ConcurrentHashMap<>();
    weightsMap.put("a", 10);
    weightsMap.put("b", 9);
    weightsMap.put("c", 8);
    weightsMap.put("d", 7);
    weightsMap.put("e", 6);
    weightsMap.put("f", 5);
    weightsMap.put("g", 4);
    weightsMap.put("h", 3);
    weightsMap.put("i", 2);
    weightsMap.put("j", 1);
  }

  @Test
  public void testReadJSONFile() {
    Assert.assertNotNull(skuObjects);
    Assert.assertTrue((skuObjects instanceof JSONObject));
  }

  @Test
  public void testReadSku1() {
    JSONObject compareObject = skuObjects.getJSONObject("sku-1");
    Assert.assertEquals(compareObject.get("att-a"), "att-a-7");
    Assert.assertNotEquals(compareObject.get("att-b"), "att-b-30");
    Assert.assertEquals(compareObject.get("att-c"), "att-c-10");
    Assert.assertEquals(compareObject.get("att-d"), "att-d-10");
    Assert.assertEquals(compareObject.get("att-e"), "att-e-15");
    Assert.assertNotEquals(compareObject.get("att-f"), "att-f-12");
    Assert.assertEquals(compareObject.get("att-g"), "att-g-2");
    Assert.assertEquals(compareObject.get("att-h"), "att-h-7");
    Assert.assertEquals(compareObject.get("att-i"), "att-i-5");
    Assert.assertNotEquals(compareObject.get("att-j"), "att-j-13");
  }

  @Test
  public void testSkuGeneratorQueue() {
    SkuGenerator skuGenerator = new SkuGenerator(skuObjects, skuQueue, inService);
    pool.submit(skuGenerator);
    waitForQueueSize(skuGenerator.getSkuQueue(), 20000);
    Assert.assertEquals(20000, skuGenerator.getSkuQueue().size());
  }

  @Test
  public void testSkuConsumer() {
    SkuConsumerManager consumerManager = new SkuConsumerManager(skuQueue, orderedQueue, inService, pool, searchObject,
        limitForExit, weightsMap);
    pool.submit(consumerManager);
    waitInService();
    Assert.assertEquals(0, skuQueue.size());
    waitInWhile(3000);
    Assert.assertEquals(limitForExit - 11, orderedQueue.size());
  }

  private void waitForQueueSize(LinkedBlockingQueue<Sku> queue, int size) {
    while (queue.size() < size) {

    }
  }

  private void waitInService() {
    while (inService.get()) {

    }
  }

  private void waitInWhile(int duration) {
    try {
      Thread.sleep(duration);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
  }
}
